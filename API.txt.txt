NB: The codes below executes REST APIs returning JSON/XML, instead of views. To return a view, ie index.html. Check Controller.txt

====== 1. BASIC USAGE ========

@SpringBootApplication
@RestController                    // Add this annotation
public class SpringbootDemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringbootDemoApplication.class, args);
    }
------------------------------------------------------------------------------------------------


    @GetMapping("/")
    public String hello(){
        return "Hello from this endpoint";
    }
    // Access via: http://localhost:8080/


    // GET with path parameter
    @GetMapping("/hello/{name}/{age}")
    public String helloWithName(@PathVariable String name, @PathVariable int age) {
        return "Hello, " + name + " of age " + age + "!";
    }
    // Access via: http://localhost:8080/hello/John/30


    // GET with request param
    @GetMapping("/greet")
    public String greetWithParam(@RequestParam String name, @RequestParam int age) {
        return "Greetings, " + name + " of age " + age +"!";
    }
    // Access via: http://localhost:8080/greet?name=Alice&age=28


    // POST endpoint
    @PostMapping("/post-example")
    public String postExample(@RequestBody Map<String, String> payload) {
        return "Received POST request with data: " + payload;
    }
    // Send POST request to: http://localhost:8080/post-example
    // With JSON body like: { "key1": "value1", "key2": "value2" }

    // PUT example
    @PutMapping("/put-example/{id}")
    public String putExample(@PathVariable int id, @RequestBody Map<String, String> payload) {
        return "Updating item with ID " + id + " using data: " + payload;
    }
    // Send PUT request to: http://localhost:8080/put-example/123
    // With JSON body like: { "key": "updatedValue" }


    // PATCH example
    @PatchMapping("/patch-example/{id}")
    public String patchExample(@PathVariable int id, @RequestBody Map<String, String> updates) {
        return "Partially updating item with ID " + id + " with data: " + updates;
    }
    // Send PATCH request to: http://localhost:8080/patch-example/789
    // With JSON body like: { "email": "new@example.com" }


    // DELETE example
    @DeleteMapping("/delete-example/{id}")
    public String deleteExample(@PathVariable int id) {
        return "Deleting item with ID " + id;
    }
    // Send DELETE request to: http://localhost:8080/delete-example/456


------------------------------------------------------------------------------------------------




===== CREATE A CONTROLLER CLASS (ie Student Controller) =====

// This class will have all the resource for the API

@SpringBootApplication
@RestController                    // Add this annotation
public class StudentController {

    // ============= GET REQUEST ================
    // 1 - http://localhost:8080/
    @GetMapping("/")
    public String hello(){
        return "Hello from this endpoint";
    }

    //	2 - http://localhost:8080/list
    @GetMapping("/list")
    public List<String> getList(){
        return List.of("One","Two","Three");
    }

    //	3 - http://localhost:8080/maps
    @GetMapping("/maps")
    public HashMap<String, String> getMap(){

        HashMap<String, String> resultMap = new HashMap<>();
        resultMap.put("key1", "value1");
        resultMap.put("key2", "value2");
        resultMap.put("key3", "value3");

        return resultMap;
    }

}

========================== USING MODEL CLASS ===================
--- The model:
public class Student {
    private Long id;
    private String name;
    private String email;
    private LocalDate dob;
    private Integer age;

... Proceed to generating constructor, getters and setters, as well as toString methods.


    // 4 - http://localhost:8080/api/v1/student
    @GetMapping(path = "api/v1/student")
    public ArrayList<Student> getStudents(){
        Student std1 = new Student(1L,"Student 1","student1@emial.com", LocalDate.of(1998,03,13),23);
        Student std2 = new Student(2L,"Student 2","student2@emial.com", LocalDate.of(2004,07,19),34);
        Student std3 = new Student(3L,"Student 3","student3@emial.com", LocalDate.of(2011,10,22),18);

        ArrayList<Student> students = new ArrayList<>(List.of(std1, std2, std3));
        return  students;
    }




